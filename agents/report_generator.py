"""
DeliverableEstimate Pro - Report Generator Agent
"""

import pandas as pd
import os
from datetime import datetime
from typing import Dict, List, Any
from pathlib import Path

from config.settings import settings


class ReportGenerator:
    """見積書出力・承認管理エージェント"""
    
    def __init__(self):
        self.settings = settings
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
    
    def process(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """見積書表示とユーザー承認処理"""
        try:
            cost_calculation = state["cost_calculation"]
            finalized_assumptions = state["finalized_assumptions"]
            env_config = state["env_config"]
            
            # コンソール見積書表示
            self._display_estimation_report(cost_calculation, finalized_assumptions)
            
            # ユーザー承認プロセス
            approval_result = self._get_user_approval()\n            \n            if approval_result[\"approved\"]:\n                # Excel出力実行\n                excel_output = self._generate_excel_output(\n                    state[\"deliverables\"],\n                    cost_calculation,\n                    finalized_assumptions,\n                    env_config\n                )\n                \n                return {\n                    **state,\n                    \"approved\": True,\n                    \"final_excel_output\": excel_output[\"file_path\"],\n                    \"excel_generation_metadata\": excel_output[\"metadata\"],\n                    \"completion_timestamp\": datetime.now().isoformat()\n                }\n            else:\n                return {\n                    **state,\n                    \"approved\": False,\n                    \"user_feedback\": approval_result[\"feedback\"],\n                    \"iteration_count\": state.get(\"iteration_count\", 0) + 1\n                }\n        except Exception as e:\n            return {\n                **state,\n                \"error\": f\"Report generation failed: {str(e)}\"\n            }\n    \n    def _display_estimation_report(self, cost_calculation: Dict, finalized_assumptions: Dict):\n        \"\"\"見積書プレビューの表示\"\"\"\n        print(\"\\n📊 見積書プレビュー\")\n        print(\"=\" * 60)\n        \n        # 成果物別見積表示\n        print(\"📋 成果物別見積:\")\n        deliverable_costs = cost_calculation['deliverable_costs']\n        for item in deliverable_costs:\n            print(f\"  {item['name']}: {item['effort_days']}人日 → {item['amount']:,}円\")\n        \n        # 技術前提条件表示\n        print(f\"\\n🛠️ 技術前提条件:\")\n        print(f\"  エンジニアレベル: {finalized_assumptions.get('engineer_level', 'N/A')}\")\n        print(f\"  技術スタック: {finalized_assumptions.get('tech_stack', 'N/A')}\")\n        \n        # 数値前提条件\n        if 'database_tables' in finalized_assumptions:\n            print(f\"  データベーステーブル: {finalized_assumptions['database_tables']}テーブル\")\n        if 'api_endpoints' in finalized_assumptions:\n            print(f\"  APIエンドポイント: {finalized_assumptions['api_endpoints']}個\")\n        if 'test_pages' in finalized_assumptions:\n            print(f\"  テストページ: {finalized_assumptions['test_pages']}ページ\")\n        \n        # 財務サマリー\n        summary = cost_calculation['financial_summary']\n        print(f\"\\n💰 財務サマリー:\")\n        print(f\"  小計: {summary['subtotal']:,}円\")\n        print(f\"  税額({summary['tax_rate']*100:.0f}%): {summary['tax_amount']:,}円\")\n        print(f\"  総額: {summary['total_amount']:,}円\")\n        print(f\"  総工数: {summary['total_effort_days']}人日\")\n        \n        # リスクアラート\n        high_risk_items = []\n        for item in deliverable_costs:\n            if item.get('confidence_level'):\n                confidence = int(item['confidence_level'].rstrip('%'))\n                if confidence < 80:\n                    high_risk_items.append(f\"{item['name']} (信頼度{confidence}%)\")\n        \n        if high_risk_items:\n            print(f\"\\n⚠️ リスクアラート:\")\n            for item in high_risk_items:\n                print(f\"  • {item}\")\n        \n        # 質問応答セッション情報\n        qa_stats = finalized_assumptions.get('qa_session_stats', {})\n        if qa_stats:\n            print(f\"\\n📝 質問応答セッション:\")\n            print(f\"  質問数: {qa_stats.get('total_questions', 0)}\")\n            print(f\"  回答数: {qa_stats.get('answered_questions', 0)}\")\n    \n    def _get_user_approval(self) -> Dict[str, Any]:\n        \"\"\"ユーザー承認プロセス\"\"\"\n        approval = input(\"\"\"\n🔍 見積書の確認をお願いします:\n\nこの見積書で問題ありませんか？\n1. はい（Yes）- Excel出力して終了\n2. いいえ（No）- 修正・調整が必要\n\n選択（Y/N）: \"\"\").lower()\n        \n        if approval in ['y', 'yes', 'はい', '1']:\n            return {\n                \"approved\": True,\n                \"action\": \"generate_excel\"\n            }\n        else:\n            # 詳細フィードバック収集\n            feedback = input(\"\"\"\n修正したい項目を選択してください:\n\n1. 成果物の追加・削除\n2. 技術前提条件の変更\n3. 工数調整\n4. 価格調整\n5. その他\n\n修正内容を詳しく記入: \"\"\")\n            \n            return {\n                \"approved\": False,\n                \"feedback\": feedback,\n                \"action\": \"revise_estimate\"\n            }\n    \n    def _generate_excel_output(self, deliverables: List[Dict], cost_calculation: Dict, \n                              finalized_assumptions: Dict, env_config: Dict) -> Dict[str, Any]:\n        \"\"\"Excel出力の生成\"\"\"\n        # タイムスタンプ付きファイル名生成\n        timestamp = datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n        filename = f\"{timestamp}.xlsx\"\n        file_path = self.output_dir / filename\n        \n        # 元のデータを復元\n        original_data = []\n        deliverable_costs = cost_calculation['deliverable_costs']\n        \n        # 成果物データを結合\n        for deliverable in deliverables:\n            # 対応するコスト情報を検索\n            cost_info = next(\n                (cost for cost in deliverable_costs if cost['name'] == deliverable['name']),\n                None\n            )\n            \n            if cost_info:\n                original_data.append({\n                    'A': deliverable['name'],\n                    'B': deliverable['description'],\n                    'C': cost_info['effort_days'],\n                    'D': cost_info['amount']\n                })\n        \n        # DataFrame作成\n        df = pd.DataFrame(original_data)\n        \n        # 言語設定に応じたヘッダー\n        if env_config.get('language') == 'ja':\n            df.columns = ['成果物名', '説明', '予想工数(人日)', f'金額({env_config.get(\"currency\", \"JPY\")})']\n        else:\n            df.columns = ['Deliverable', 'Description', 'Effort (Person-Days)', f'Amount ({env_config.get(\"currency\", \"JPY\")})']\n        \n        # 財務サマリー行を追加\n        summary = cost_calculation['financial_summary']\n        \n        # 空行追加\n        df.loc[len(df)] = ['', '', '', '']\n        \n        # サマリー行追加\n        if env_config.get('language') == 'ja':\n            df.loc[len(df)] = ['小計', '', summary['total_effort_days'], summary['subtotal']]\n            df.loc[len(df)] = [f'税額({summary[\"tax_rate\"]*100:.0f}%)', '', '', summary['tax_amount']]\n            df.loc[len(df)] = ['総額', '', '', summary['total_amount']]\n            df.loc[len(df)] = ['', '', '', '']\n            df.loc[len(df)] = ['【見積前提条件】', '', '', '']\n        else:\n            df.loc[len(df)] = ['Subtotal', '', summary['total_effort_days'], summary['subtotal']]\n            df.loc[len(df)] = [f'Tax ({summary[\"tax_rate\"]*100:.0f}%)', '', '', summary['tax_amount']]\n            df.loc[len(df)] = ['Total', '', '', summary['total_amount']]\n            df.loc[len(df)] = ['', '', '', '']\n            df.loc[len(df)] = ['【Estimation Assumptions】', '', '', '']\n        \n        # 前提条件を追加\n        assumptions_to_add = [\n            ('エンジニアレベル' if env_config.get('language') == 'ja' else 'Engineer Level', \n             finalized_assumptions.get('engineer_level', 'N/A')),\n            ('人日単価' if env_config.get('language') == 'ja' else 'Daily Rate', \n             f\"{env_config.get('daily_rate', 0):,} ({env_config.get('currency', 'JPY')})\"),\n            ('技術スタック' if env_config.get('language') == 'ja' else 'Tech Stack', \n             finalized_assumptions.get('tech_stack', 'N/A')),\n        ]\n        \n        # 数値前提条件\n        if 'database_tables' in finalized_assumptions:\n            assumptions_to_add.append((\n                'データベーステーブル' if env_config.get('language') == 'ja' else 'Database Tables',\n                f\"{finalized_assumptions['database_tables']}テーブル想定\" if env_config.get('language') == 'ja' else f\"{finalized_assumptions['database_tables']} tables assumed\"\n            ))\n        \n        if 'api_endpoints' in finalized_assumptions:\n            assumptions_to_add.append((\n                'APIエンドポイント' if env_config.get('language') == 'ja' else 'API Endpoints',\n                f\"{finalized_assumptions['api_endpoints']}エンドポイント想定\" if env_config.get('language') == 'ja' else f\"{finalized_assumptions['api_endpoints']} endpoints assumed\"\n            ))\n        \n        if 'test_pages' in finalized_assumptions:\n            assumptions_to_add.append((\n                'テストページ' if env_config.get('language') == 'ja' else 'Test Pages',\n                f\"{finalized_assumptions['test_pages']}ページ想定\" if env_config.get('language') == 'ja' else f\"{finalized_assumptions['test_pages']} pages assumed\"\n            ))\n        \n        # 前提条件を追加\n        for label, value in assumptions_to_add:\n            df.loc[len(df)] = [label, value, '', '']\n        \n        # Excelファイル作成\n        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:\n            df.to_excel(writer, index=False, sheet_name='見積書')\n            \n            # ワークシートの取得と書式設定\n            worksheet = writer.sheets['見積書']\n            \n            # 列幅の調整\n            worksheet.column_dimensions['A'].width = 25\n            worksheet.column_dimensions['B'].width = 50\n            worksheet.column_dimensions['C'].width = 15\n            worksheet.column_dimensions['D'].width = 15\n            \n            # 数値フォーマットの設定（金額列）\n            for row in range(2, len(df) + 2):\n                if isinstance(df.iloc[row-2, 3], (int, float)) and df.iloc[row-2, 3] != '':\n                    worksheet.cell(row=row, column=4).number_format = '#,##0'\n        \n        print(f\"\\n✅ 見積書を出力しました: {file_path}\")\n        \n        return {\n            \"file_path\": str(file_path),\n            \"filename\": filename,\n            \"metadata\": {\n                \"generation_timestamp\": datetime.now().isoformat(),\n                \"total_rows\": len(df),\n                \"data_rows\": len(deliverables),\n                \"summary_rows\": len(df) - len(deliverables),\n                \"language\": env_config.get('language', 'ja'),\n                \"currency\": env_config.get('currency', 'JPY')\n            }\n        }